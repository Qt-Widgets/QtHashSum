#include "progressdialog.h"
#include "ui_progressdialog.h"

#include <QGridLayout>
#include <QDateTime>

ProgressDialog::ProgressDialog(QVector<FileHasher *> jobs, int size, QWidget *parent) :
    QDialog(parent),
    ui(new Ui::ProgressDialog),
    jobs(jobs)
{
    ui->setupUi(this);
    setWindowTitle(windowTitle() + " (" + QString::number(jobs.size()) + " files)");
    QGridLayout *layout = new QGridLayout(this);
    for(int i = 0; i < qMin(size, jobs.size()); ++i)
    {
        ProgressData pd;
        pd.pb = new QProgressBar(this);
        pd.pb->setMinimum(0);
        pd.pb->setMaximum(100);
        pd.pb->setValue(jobs[i]->percent());
        pd.label = new QLabel(this);
        pd.label->setText(QString::number(i + 1) + " " + jobs[i]->info());
        layout->addWidget(pd.label);
        layout->addWidget(pd.pb);
        pds.append(pd);
    }
    setLayout(layout);
    connect(&timer, &QTimer::timeout, this, &ProgressDialog::timer_timeout);
    timer.start(200);
}

ProgressDialog::~ProgressDialog()
{
    delete ui;
}

void ProgressDialog::timer_timeout()
{
    int used = 0;
    bool done = true;
    for(int i = 0; i < jobs.size() && used < pds.size(); ++i)
    {
        if(jobs[i]->started && (!jobs[i]->done || jobs.size() - i <= pds.size() - used))
        {
            pds[used].pb->setValue(jobs[i]->percent());
            pds[used].label->setText(QString::number(i + 1) + " " + jobs[i]->info());
            used++;
        }
        if(!jobs[i]->done || (used == pds.size() && i != jobs.size() - 1)) done = false;
    }
    if(done)
    {
        timer.stop();
        QString result;
        result.append("Checksums generated by QtHashSum 1.0.0\n");
        result.append("https://github.com/fffaraz/QtHashSum\n");
        result.append(QDateTime::currentDateTime().toString() + "\n");
        result.append(QString::number(jobs.size()) + " files hashed\n\n");
        for(int i = 0; i < jobs.size(); ++i)
        {
            result.append(jobs[i]->methodStr() + " " + jobs[i]->hash + " " + QString::number(jobs[i]->size) + " " +jobs[i]->name() + "\n");
            delete jobs[i];
        }
        ResultDialog *rd = new ResultDialog(result);
        rd->show();
        this->deleteLater();
    }
}
